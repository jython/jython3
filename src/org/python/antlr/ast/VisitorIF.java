// Autogenerated AST node
package org.python.antlr.ast;

public interface VisitorIF<R> {
    public R visitModule(Module node) throws Exception;
    public R visitInteractive(Interactive node) throws Exception;
    public R visitExpression(Expression node) throws Exception;
    public R visitSuite(Suite node) throws Exception;
    public R visitFunctionDef(FunctionDef node) throws Exception;
    public R visitClassDef(ClassDef node) throws Exception;
    public R visitReturn(Return node) throws Exception;
    public R visitDelete(Delete node) throws Exception;
    public R visitAssign(Assign node) throws Exception;
    public R visitAugAssign(AugAssign node) throws Exception;
    public R visitPrint(Print node) throws Exception;
    public R visitFor(For node) throws Exception;
    public R visitWhile(While node) throws Exception;
    public R visitIf(If node) throws Exception;
    public R visitWith(With node) throws Exception;
    public R visitRaise(Raise node) throws Exception;
    public R visitTryExcept(TryExcept node) throws Exception;
    public R visitTryFinally(TryFinally node) throws Exception;
    public R visitAssert(Assert node) throws Exception;
    public R visitImport(Import node) throws Exception;
    public R visitImportFrom(ImportFrom node) throws Exception;
    public R visitExec(Exec node) throws Exception;
    public R visitGlobal(Global node) throws Exception;
    public R visitNonlocal(Nonlocal node) throws Exception;
    public R visitExpr(Expr node) throws Exception;
    public R visitPass(Pass node) throws Exception;
    public R visitBreak(Break node) throws Exception;
    public R visitContinue(Continue node) throws Exception;
    public R visitBoolOp(BoolOp node) throws Exception;
    public R visitBinOp(BinOp node) throws Exception;
    public R visitUnaryOp(UnaryOp node) throws Exception;
    public R visitLambda(Lambda node) throws Exception;
    public R visitIfExp(IfExp node) throws Exception;
    public R visitDict(Dict node) throws Exception;
    public R visitSet(Set node) throws Exception;
    public R visitListComp(ListComp node) throws Exception;
    public R visitSetComp(SetComp node) throws Exception;
    public R visitDictComp(DictComp node) throws Exception;
    public R visitGeneratorExp(GeneratorExp node) throws Exception;
    public R visitYield(Yield node) throws Exception;
    public R visitYieldFrom(YieldFrom node) throws Exception;
    public R visitCompare(Compare node) throws Exception;
    public R visitCall(Call node) throws Exception;
    public R visitRepr(Repr node) throws Exception;
    public R visitNum(Num node) throws Exception;
    public R visitStr(Str node) throws Exception;
    public R visitNameConstant(NameConstant node) throws Exception;
    public R visitAttribute(Attribute node) throws Exception;
    public R visitSubscript(Subscript node) throws Exception;
    public R visitStarred(Starred node) throws Exception;
    public R visitName(Name node) throws Exception;
    public R visitList(List node) throws Exception;
    public R visitTuple(Tuple node) throws Exception;
    public R visitEllipsis(Ellipsis node) throws Exception;
    public R visitSlice(Slice node) throws Exception;
    public R visitExtSlice(ExtSlice node) throws Exception;
    public R visitIndex(Index node) throws Exception;
    public R visitExceptHandler(ExceptHandler node) throws Exception;
}
